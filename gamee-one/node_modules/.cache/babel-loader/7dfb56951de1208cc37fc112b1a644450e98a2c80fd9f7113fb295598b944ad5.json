{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\JOGO-DA-MEMORIA\\\\gamee-one\\\\src\\\\componentes\\\\JogoDaMemoria.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport '../estilos/JogoDaMemoria.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst JogoDaMemoria = () => {\n  _s();\n  const [cartas, setCartas] = useState([]);\n  const [cartasViradas, setCartasViradas] = useState([]);\n  const [paresCombinados, setParesCombinados] = useState(0);\n  const [tabuleiroBloqueado, setTabuleiroBloqueado] = useState(false);\n  useEffect(() => {\n    inicializarTabuleiro();\n  }, []);\n  const inicializarTabuleiro = () => {\n    const imagensCartas = [\"images/1.jpg\", \"images/2.jpg\", \"images/3.png\", \"images/4.png\", \"images/5.jpg\", \"images/6.jpg\", \"images/7.jpg\", \"images/8.jpg\", \"images/9.jpg\", \"images/10.jpg\", \"images/11.jpg\", \"images/15.jpg\", \"images/12.jpeg\", \"images/13.jpeg\", \"images/14.jpeg\"];\n    const cartasEmbaralhadas = [...imagensCartas, ...imagensCartas].sort(() => Math.random() - 0.5).map((src, index) => ({\n      id: index,\n      src,\n      virada: false,\n      combinada: false\n    }));\n    setCartas(cartasEmbaralhadas);\n  };\n  const virarCarta = cartaClicada => {\n    if (tabuleiroBloqueado) return;\n    if (cartaClicada.virada) return;\n    const novasCartas = cartas.map(carta => carta.id === cartaClicada.id ? {\n      ...carta,\n      virada: true\n    } : carta);\n    setCartas(novasCartas);\n    if (cartasViradas.length === 1) {\n      setTabuleiroBloqueado(true);\n      verificarCombinacao([...cartasViradas, cartaClicada]);\n    } else {\n      setCartasViradas([cartaClicada]);\n    }\n  };\n  const verificarCombinacao = cartasParaVerificar => {\n    const [primeiraCarta, segundaCarta] = cartasParaVerificar;\n    if (primeiraCarta.src === segundaCarta.src) {\n      const novasCartas = cartas.map(carta => carta.id === primeiraCarta.id || carta.id === segundaCarta.id ? {\n        ...carta,\n        combinada: true,\n        virada: true\n      } : carta);\n      setCartas(novasCartas);\n      setParesCombinados(paresCombinados + 1);\n      setCartasViradas([]);\n      setTabuleiroBloqueado(false);\n      if (paresCombinados + 1 === cartas.length / 2) {\n        // Jogo terminado\n        setTimeout(() => {\n          alert(\"Parabéns! Você encontrou todos os pares!\");\n        }, 300);\n      }\n    } else {\n      setTimeout(() => {\n        setCartas(cartas.map(carta => carta.id === primeiraCarta.id || carta.id === segundaCarta.id ? {\n          ...carta,\n          virada: false\n        } : carta));\n        setCartasViradas([]);\n        setTabuleiroBloqueado(false);\n      }, 1000);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"jogo-da-memoria\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Jogo da Mem\\xF3ria\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tabuleiro\",\n      children: cartas.map(carta => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `carta ${carta.virada ? 'virada' : ''} ${carta.combinada ? 'combinada' : ''}`,\n        onClick: () => virarCarta(carta),\n        children: carta.virada && /*#__PURE__*/_jsxDEV(\"img\", {\n          src: carta.src,\n          alt: \"Carta\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 30\n        }, this)\n      }, carta.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n};\n_s(JogoDaMemoria, \"vtFB0cdzEvaMUAkR0/0g32HBXM8=\");\n_c = JogoDaMemoria;\nexport default JogoDaMemoria;\nvar _c;\n$RefreshReg$(_c, \"JogoDaMemoria\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","JogoDaMemoria","_s","cartas","setCartas","cartasViradas","setCartasViradas","paresCombinados","setParesCombinados","tabuleiroBloqueado","setTabuleiroBloqueado","inicializarTabuleiro","imagensCartas","cartasEmbaralhadas","sort","Math","random","map","src","index","id","virada","combinada","virarCarta","cartaClicada","novasCartas","carta","length","verificarCombinacao","cartasParaVerificar","primeiraCarta","segundaCarta","setTimeout","alert","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","alt","_c","$RefreshReg$"],"sources":["C:/xampp/htdocs/JOGO-DA-MEMORIA/gamee-one/src/componentes/JogoDaMemoria.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport '../estilos/JogoDaMemoria.css';\n\nconst JogoDaMemoria = () => {\n  const [cartas, setCartas] = useState([]);\n  const [cartasViradas, setCartasViradas] = useState([]);\n  const [paresCombinados, setParesCombinados] = useState(0);\n  const [tabuleiroBloqueado, setTabuleiroBloqueado] = useState(false);\n\n  useEffect(() => {\n    inicializarTabuleiro();\n  }, []);\n\n  const inicializarTabuleiro = () => {\n    const imagensCartas = [\n      \"images/1.jpg\", \"images/2.jpg\", \"images/3.png\", \"images/4.png\",\n      \"images/5.jpg\", \"images/6.jpg\", \"images/7.jpg\", \"images/8.jpg\",\n      \"images/9.jpg\", \"images/10.jpg\", \"images/11.jpg\", \"images/15.jpg\",\n      \"images/12.jpeg\", \"images/13.jpeg\", \"images/14.jpeg\"\n    ];\n\n    const cartasEmbaralhadas = [...imagensCartas, ...imagensCartas]\n      .sort(() => Math.random() - 0.5)\n      .map((src, index) => ({\n        id: index,\n        src,\n        virada: false,\n        combinada: false\n      }));\n\n    setCartas(cartasEmbaralhadas);\n  };\n\n  const virarCarta = (cartaClicada) => {\n    if (tabuleiroBloqueado) return;\n    if (cartaClicada.virada) return;\n\n    const novasCartas = cartas.map(carta =>\n      carta.id === cartaClicada.id ? { ...carta, virada: true } : carta\n    );\n\n    setCartas(novasCartas);\n\n    if (cartasViradas.length === 1) {\n      setTabuleiroBloqueado(true);\n      verificarCombinacao([...cartasViradas, cartaClicada]);\n    } else {\n      setCartasViradas([cartaClicada]);\n    }\n  };\n\n  const verificarCombinacao = (cartasParaVerificar) => {\n    const [primeiraCarta, segundaCarta] = cartasParaVerificar;\n\n    if (primeiraCarta.src === segundaCarta.src) {\n      const novasCartas = cartas.map(carta =>\n        carta.id === primeiraCarta.id || carta.id === segundaCarta.id\n          ? { ...carta, combinada: true, virada: true }\n          : carta\n      );\n      setCartas(novasCartas);\n      setParesCombinados(paresCombinados + 1);\n      setCartasViradas([]);\n      setTabuleiroBloqueado(false);\n\n      if (paresCombinados + 1 === cartas.length / 2) {\n        // Jogo terminado\n        setTimeout(() => {\n          alert(\"Parabéns! Você encontrou todos os pares!\");\n        }, 300);\n      }\n    } else {\n      setTimeout(() => {\n        setCartas(cartas.map(carta =>\n          carta.id === primeiraCarta.id || carta.id === segundaCarta.id\n            ? { ...carta, virada: false }\n            : carta\n        ));\n        setCartasViradas([]);\n        setTabuleiroBloqueado(false);\n      }, 1000);\n    }\n  };\n\n  return (\n    <div className=\"jogo-da-memoria\">\n      <h2>Jogo da Memória</h2>\n      <div className=\"tabuleiro\">\n        {cartas.map(carta => (\n          <div\n            key={carta.id}\n            className={`carta ${carta.virada ? 'virada' : ''} ${carta.combinada ? 'combinada' : ''}`}\n            onClick={() => virarCarta(carta)}\n          >\n            {carta.virada && <img src={carta.src} alt=\"Carta\" />}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default JogoDaMemoria;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}